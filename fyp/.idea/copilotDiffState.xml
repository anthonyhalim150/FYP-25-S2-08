<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/wise-workout/wise-workout-app/lib/screens/workout/exercise_log_page.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/wise-workout/wise-workout-app/lib/screens/workout/exercise_log_page.dart" />
              <option name="originalContent" value="import 'package:flutter/material.dart';&#10;import 'package:circular_countdown_timer/circular_countdown_timer.dart';&#10;import '../model/exercise_model.dart';&#10;import '../../services/workout_session_service.dart';&#10;import '../../widgets/exercise_timer.dart';&#10;&#10;class ExerciseLogPage extends StatefulWidget {&#10;  final Exercise exercise;&#10;&#10;  const ExerciseLogPage({super.key, required this.exercise});&#10;&#10;  @override&#10;  State&lt;ExerciseLogPage&gt; createState() =&gt; _ExerciseLogPageState();&#10;}&#10;&#10;class _ExerciseLogPageState extends State&lt;ExerciseLogPage&gt; {&#10;  late List&lt;Map&lt;String, dynamic&gt;&gt; sets;&#10;  final CountDownController _restTimerController = CountDownController();&#10;  final WorkoutSessionService _session = WorkoutSessionService();&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    final setsCount = widget.exercise.exerciseSets ?? 3;&#10;    final defaultReps = widget.exercise.exerciseReps ?? 10;&#10;&#10;    sets = List.generate(setsCount, (index) {&#10;&#10;      return {&#10;        'set': index + 1,&#10;        'weight': 0.0,&#10;        'reps': widget.exercise.exerciseReps,&#10;        'finished': false,&#10;      };&#10;    });&#10;  }&#10;&#10;  void _addSet() {&#10;    setState(() {&#10;      sets.add({&#10;        'set': sets.length + 1,&#10;        'weight': 0.0,&#10;        'reps': widget.exercise.exerciseReps ?? 10,&#10;        'finished': false,&#10;      });&#10;    });&#10;  }&#10;&#10;  void _editValue(int index, String key, dynamic value) {&#10;    setState(() {&#10;      sets[index][key] = value;&#10;    });&#10;  }&#10;&#10;  Future&lt;String?&gt; _showEditDialog(String initial, String label) async {&#10;    final controller = TextEditingController(text: initial);&#10;    return showDialog&lt;String&gt;(&#10;      context: context,&#10;      builder: (context) =&gt; AlertDialog(&#10;        title: Text('Edit $label'),&#10;        content: TextField(&#10;          controller: controller,&#10;          keyboardType: TextInputType.number,&#10;          decoration: InputDecoration(hintText: label),&#10;        ),&#10;        actions: [&#10;          TextButton(&#10;            onPressed: () =&gt; Navigator.pop(context, controller.text),&#10;            child: const Text('Save'),&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  void _markSetFinished(int index) {&#10;    if (sets[index]['finished'] == true) return;&#10;&#10;    setState(() {&#10;      sets[index]['finished'] = true;&#10;    });&#10;&#10;    // Check if all sets are finished&#10;    bool allFinished = sets.every((set) =&gt; set['finished'] == true);&#10;    if (allFinished) {&#10;      // Aggregate total reps and weight&#10;      double totalReps = sets.fold(0, (sum, set) =&gt; sum + (set['reps'] ?? 0));&#10;      double totalWeight = sets.fold(0.0, (sum, set) =&gt; sum + (set['weight'] ?? 0.0));&#10;&#10;      // MET formula calculation&#10;      // MET value for resistance training: 3.5-6.0 (use 4.0 as average)&#10;      // Calories burned = MET * weight(kg) * duration(hr)&#10;      // For simplicity, estimate duration as 1 min per set&#10;      double met = 4.0;&#10;      double userWeight = 70.0; // TODO: Replace with actual user weight&#10;      double durationHr = sets.length / 60.0;&#10;      double calories = met * userWeight * durationHr;&#10;&#10;      _session.addExerciseLog(&#10;        exercise: widget.exercise,&#10;        calories: calories,&#10;      );&#10;    }&#10;&#10;    ExerciseTimer.showRestTimer(context, _restTimerController);&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      backgroundColor: const Color(0xFFFAF7F1),&#10;      body: Column(&#10;        children: [&#10;          Stack(&#10;            children: [&#10;              SizedBox(&#10;                width: double.infinity,&#10;                height: 280,&#10;                child: Image.asset(&#10;                  'assets/exerciseGif/${widget.exercise.exerciseName.replaceAll(' ', '_').toLowerCase()}.gif',&#10;                  fit: BoxFit.cover,&#10;                ),&#10;              ),&#10;              Positioned(&#10;                top: MediaQuery.of(context).padding.top + 8,&#10;                left: 12,&#10;                child: CircleAvatar(&#10;                  backgroundColor: Colors.white.withOpacity(0.85),&#10;                  child: IconButton(&#10;                    icon: const Icon(Icons.arrow_back, color: Colors.black),&#10;                    onPressed: () =&gt; Navigator.pop(context),&#10;                  ),&#10;                ),&#10;              ),&#10;            ],&#10;          ),&#10;          const SizedBox(height: 16),&#10;&#10;          // Table Header&#10;          Padding(&#10;            padding: const EdgeInsets.symmetric(horizontal: 24.0),&#10;            child: Table(&#10;              columnWidths: const {&#10;                0: FlexColumnWidth(1.2),&#10;                1: FlexColumnWidth(2),&#10;                2: FlexColumnWidth(2),&#10;                3: FlexColumnWidth(1.5),&#10;              },&#10;              children: const [&#10;                TableRow(&#10;                  children: [&#10;                    Center(child: Text('Set', style: TextStyle(fontWeight: FontWeight.bold))),&#10;                    Center(child: Text('Weight', style: TextStyle(fontWeight: FontWeight.bold))),&#10;                    Center(child: Text('Reps', style: TextStyle(fontWeight: FontWeight.bold))),&#10;                    Center(child: Text('Action', style: TextStyle(fontWeight: FontWeight.bold))),&#10;                  ],&#10;                ),&#10;              ],&#10;            ),&#10;          ),&#10;          const Divider(thickness: 1.5, color: Colors.grey),&#10;&#10;          // Table Body&#10;          Expanded(&#10;            child: Padding(&#10;              padding: const EdgeInsets.symmetric(horizontal: 24.0),&#10;              child: Table(&#10;                columnWidths: const {&#10;                  0: FlexColumnWidth(1.2),&#10;                  1: FlexColumnWidth(2),&#10;                  2: FlexColumnWidth(2),&#10;                  3: FlexColumnWidth(1.5),&#10;                },&#10;                children: [&#10;                  for (int index = 0; index &lt; sets.length; index++)&#10;                    TableRow(&#10;                      children: [&#10;                        Center(child: Padding(&#10;                          padding: const EdgeInsets.symmetric(vertical: 12.0),&#10;                          child: Text('Set ${sets[index]['set']}'),&#10;                        )),&#10;                        Center(child: GestureDetector(&#10;                          onTap: () async {&#10;                            final result = await _showEditDialog(sets[index]['weight'].toString(), 'Weight');&#10;                            if (result != null) _editValue(index, 'weight', double.tryParse(result) ?? 0.0);&#10;                          },&#10;                          child: Padding(&#10;                            padding: const EdgeInsets.symmetric(vertical: 12.0),&#10;                            child: Text('${sets[index]['weight']} kg',&#10;                                style: const TextStyle(color: Colors.blue)),&#10;                          ),&#10;                        )),&#10;                        Center(child: GestureDetector(&#10;                          onTap: () async {&#10;                            final result = await _showEditDialog(sets[index]['reps'].toString(), 'Reps');&#10;                            if (result != null) _editValue(index, 'reps', int.tryParse(result) ?? 1);&#10;                          },&#10;                          child: Padding(&#10;                            padding: const EdgeInsets.symmetric(vertical: 12.0),&#10;                            child: Text('${sets[index]['reps']}',&#10;                                style: const TextStyle(color: Colors.blue)),&#10;                          ),&#10;                        )),&#10;                        Center(child: IgnorePointer(&#10;                          ignoring: sets[index]['finished'] == true,&#10;                          child: GestureDetector(&#10;                          onTap: () =&gt; _markSetFinished(index),&#10;                          child: Padding(&#10;                            padding: const EdgeInsets.symmetric(vertical: 12.0),&#10;                            child: Icon(&#10;                              sets[index]['finished'] == true&#10;                                  ? Icons.check_circle&#10;                                  : Icons.check_circle_outline,&#10;                              color: sets[index]['finished'] == true ? Colors.green : Colors.grey,&#10;                            ),&#10;                          ),&#10;                        )),&#10;                        ),&#10;                      ],&#10;                    ),&#10;                ],&#10;              ),&#10;            ),&#10;          ),&#10;&#10;          const SizedBox(height: 10),&#10;          Padding(&#10;            padding: const EdgeInsets.symmetric(horizontal: 24.0),&#10;            child: ElevatedButton(&#10;              style: ElevatedButton.styleFrom(backgroundColor: Colors.blue.shade900),&#10;              onPressed: _addSet,&#10;              child: const Text('+ Add Set'),&#10;            ),&#10;          ),&#10;          const SizedBox(height: 10),&#10;          Padding(&#10;            padding: const EdgeInsets.symmetric(horizontal: 24.0),&#10;            child: ElevatedButton(&#10;              style: ElevatedButton.styleFrom(backgroundColor: Colors.orange),&#10;              onPressed: () =&gt; ExerciseTimer.showRestTimer(context, _restTimerController),&#10;              child: const Text('Rest Timer'),&#10;            ),&#10;          ),&#10;          const SizedBox(height: 20),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import 'package:flutter/material.dart';&#10;import 'package:circular_countdown_timer/circular_countdown_timer.dart';&#10;import '../model/exercise_model.dart';&#10;import '../../services/workout_session_service.dart';&#10;import '../../widgets/exercise_timer.dart';&#10;&#10;class ExerciseLogPage extends StatefulWidget {&#10;  final Exercise exercise;&#10;&#10;  const ExerciseLogPage({super.key, required this.exercise});&#10;&#10;  @override&#10;  State&lt;ExerciseLogPage&gt; createState() =&gt; _ExerciseLogPageState();&#10;}&#10;&#10;class _ExerciseLogPageState extends State&lt;ExerciseLogPage&gt; {&#10;  late List&lt;Map&lt;String, dynamic&gt;&gt; sets;&#10;  final CountDownController _restTimerController = CountDownController();&#10;  final WorkoutSessionService _session = WorkoutSessionService();&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    final setsCount = widget.exercise.exerciseSets ?? 3;&#10;    final defaultReps = widget.exercise.exerciseReps ?? 10;&#10;&#10;    sets = List.generate(setsCount, (index) {&#10;&#10;      return {&#10;        'set': index + 1,&#10;        'weight': 0.0,&#10;        'reps': widget.exercise.exerciseReps,&#10;        'finished': false,&#10;      };&#10;    });&#10;  }&#10;&#10;  void _addSet() {&#10;    setState(() {&#10;      sets.add({&#10;        'set': sets.length + 1,&#10;        'weight': 0.0,&#10;        'reps': widget.exercise.exerciseReps ?? 10,&#10;        'finished': false,&#10;      });&#10;    });&#10;  }&#10;&#10;  void _editValue(int index, String key, dynamic value) {&#10;    setState(() {&#10;      sets[index][key] = value;&#10;    });&#10;  }&#10;&#10;  Future&lt;String?&gt; _showEditDialog(String initial, String label) async {&#10;    final controller = TextEditingController(text: initial);&#10;    return showDialog&lt;String&gt;(&#10;      context: context,&#10;      builder: (context) =&gt; AlertDialog(&#10;        title: Text('Edit $label'),&#10;        content: TextField(&#10;          controller: controller,&#10;          keyboardType: TextInputType.number,&#10;          decoration: InputDecoration(hintText: label),&#10;        ),&#10;        actions: [&#10;          TextButton(&#10;            onPressed: () =&gt; Navigator.pop(context, controller.text),&#10;            child: const Text('Save'),&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  void _markSetFinished(int index) {&#10;    if (sets[index]['finished'] == true) return;&#10;&#10;    setState(() {&#10;      sets[index]['finished'] = true;&#10;    });&#10;&#10;    // Check if all sets are finished&#10;    bool allFinished = sets.every((set) =&gt; set['finished'] == true);&#10;    if (allFinished) {&#10;      // Aggregate total reps and weight&#10;      double totalReps = sets.fold(0, (sum, set) =&gt; sum + (set['reps'] ?? 0));&#10;      double totalWeight = sets.fold(0.0, (sum, set) =&gt; sum + (set['weight'] ?? 0.0));&#10;&#10;      // MET formula calculation&#10;      double met = 4.0;&#10;      double userWeight = 70.0; // TODO: Replace with actual user weight&#10;      double durationHr = sets.length / 60.0;&#10;      double calories = met * userWeight * durationHr;&#10;&#10;      // Save the actual sets data to the session&#10;      _session.addExerciseLog(&#10;        exercise: widget.exercise,&#10;        calories: calories,&#10;        sets: List&lt;Map&lt;String, dynamic&gt;&gt;.from(sets),&#10;      );&#10;    }&#10;&#10;    ExerciseTimer.showRestTimer(context, _restTimerController);&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      backgroundColor: const Color(0xFFFAF7F1),&#10;      body: Column(&#10;        children: [&#10;          Stack(&#10;            children: [&#10;              SizedBox(&#10;                width: double.infinity,&#10;                height: 280,&#10;                child: Image.asset(&#10;                  'assets/exerciseGif/${widget.exercise.exerciseName.replaceAll(' ', '_').toLowerCase()}.gif',&#10;                  fit: BoxFit.cover,&#10;                ),&#10;              ),&#10;              Positioned(&#10;                top: MediaQuery.of(context).padding.top + 8,&#10;                left: 12,&#10;                child: CircleAvatar(&#10;                  backgroundColor: Colors.white.withOpacity(0.85),&#10;                  child: IconButton(&#10;                    icon: const Icon(Icons.arrow_back, color: Colors.black),&#10;                    onPressed: () =&gt; Navigator.pop(context),&#10;                  ),&#10;                ),&#10;              ),&#10;            ],&#10;          ),&#10;          const SizedBox(height: 16),&#10;&#10;          // Table Header&#10;          Padding(&#10;            padding: const EdgeInsets.symmetric(horizontal: 24.0),&#10;            child: Table(&#10;              columnWidths: const {&#10;                0: FlexColumnWidth(1.2),&#10;                1: FlexColumnWidth(2),&#10;                2: FlexColumnWidth(2),&#10;                3: FlexColumnWidth(1.5),&#10;              },&#10;              children: const [&#10;                TableRow(&#10;                  children: [&#10;                    Center(child: Text('Set', style: TextStyle(fontWeight: FontWeight.bold))),&#10;                    Center(child: Text('Weight', style: TextStyle(fontWeight: FontWeight.bold))),&#10;                    Center(child: Text('Reps', style: TextStyle(fontWeight: FontWeight.bold))),&#10;                    Center(child: Text('Action', style: TextStyle(fontWeight: FontWeight.bold))),&#10;                  ],&#10;                ),&#10;              ],&#10;            ),&#10;          ),&#10;          const Divider(thickness: 1.5, color: Colors.grey),&#10;&#10;          // Table Body&#10;          Expanded(&#10;            child: Padding(&#10;              padding: const EdgeInsets.symmetric(horizontal: 24.0),&#10;              child: Table(&#10;                columnWidths: const {&#10;                  0: FlexColumnWidth(1.2),&#10;                  1: FlexColumnWidth(2),&#10;                  2: FlexColumnWidth(2),&#10;                  3: FlexColumnWidth(1.5),&#10;                },&#10;                children: [&#10;                  for (int index = 0; index &lt; sets.length; index++)&#10;                    TableRow(&#10;                      children: [&#10;                        Center(child: Padding(&#10;                          padding: const EdgeInsets.symmetric(vertical: 12.0),&#10;                          child: Text('Set ${sets[index]['set']}'),&#10;                        )),&#10;                        Center(child: GestureDetector(&#10;                          onTap: () async {&#10;                            final result = await _showEditDialog(sets[index]['weight'].toString(), 'Weight');&#10;                            if (result != null) _editValue(index, 'weight', double.tryParse(result) ?? 0.0);&#10;                          },&#10;                          child: Padding(&#10;                            padding: const EdgeInsets.symmetric(vertical: 12.0),&#10;                            child: Text('${sets[index]['weight']} kg',&#10;                                style: const TextStyle(color: Colors.blue)),&#10;                          ),&#10;                        )),&#10;                        Center(child: GestureDetector(&#10;                          onTap: () async {&#10;                            final result = await _showEditDialog(sets[index]['reps'].toString(), 'Reps');&#10;                            if (result != null) _editValue(index, 'reps', int.tryParse(result) ?? 1);&#10;                          },&#10;                          child: Padding(&#10;                            padding: const EdgeInsets.symmetric(vertical: 12.0),&#10;                            child: Text('${sets[index]['reps']}',&#10;                                style: const TextStyle(color: Colors.blue)),&#10;                          ),&#10;                        )),&#10;                        Center(child: IgnorePointer(&#10;                          ignoring: sets[index]['finished'] == true,&#10;                          child: GestureDetector(&#10;                          onTap: () =&gt; _markSetFinished(index),&#10;                          child: Padding(&#10;                            padding: const EdgeInsets.symmetric(vertical: 12.0),&#10;                            child: Icon(&#10;                              sets[index]['finished'] == true&#10;                                  ? Icons.check_circle&#10;                                  : Icons.check_circle_outline,&#10;                              color: sets[index]['finished'] == true ? Colors.green : Colors.grey,&#10;                            ),&#10;                          ),&#10;                        )),&#10;                        ),&#10;                      ],&#10;                    ),&#10;                ],&#10;              ),&#10;            ),&#10;          ),&#10;&#10;          const SizedBox(height: 10),&#10;          Padding(&#10;            padding: const EdgeInsets.symmetric(horizontal: 24.0),&#10;            child: ElevatedButton(&#10;              style: ElevatedButton.styleFrom(backgroundColor: Colors.blue.shade900),&#10;              onPressed: _addSet,&#10;              child: const Text('+ Add Set'),&#10;            ),&#10;          ),&#10;          const SizedBox(height: 10),&#10;          Padding(&#10;            padding: const EdgeInsets.symmetric(horizontal: 24.0),&#10;            child: ElevatedButton(&#10;              style: ElevatedButton.styleFrom(backgroundColor: Colors.orange),&#10;              onPressed: () =&gt; ExerciseTimer.showRestTimer(context, _restTimerController),&#10;              child: const Text('Rest Timer'),&#10;            ),&#10;          ),&#10;          const SizedBox(height: 20),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/wise-workout/wise-workout-app/lib/screens/workout/workout_analysis_page.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/wise-workout/wise-workout-app/lib/screens/workout/workout_analysis_page.dart" />
              <option name="originalContent" value="import 'package:flutter/material.dart';&#10;import 'package:intl/intl.dart';&#10;import '../model/exercise_model.dart';&#10;import '../../services/workout_session_service.dart';&#10;&#10;class WorkoutAnalysisPage extends StatelessWidget {&#10;  const WorkoutAnalysisPage({super.key});&#10;&#10;  String _formatDuration(Duration d) {&#10;    final minutes = d.inMinutes;&#10;    return &quot;$minutes min&quot;;&#10;  }&#10;&#10;  String _formattedDate() {&#10;    return DateFormat('yyyy-MM-dd').format(DateTime.now());&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    final session = WorkoutSessionService();&#10;    final workoutName = session.workoutName ?? &quot;My Workout&quot;;&#10;    final duration = session.elapsed;&#10;    final logs = session.loggedExercises;&#10;&#10;    // Calculations&#10;    final totalCalories = logs.fold&lt;double&gt;(0.0, (sum, log) =&gt; (sum ?? 0.0) + (log.calories ?? 0.0));&#10;    final totalSets = logs.length;&#10;    final totalReps = logs.map((log) =&gt; log.exercise.exerciseReps ?? 0).toList();&#10;    final maxWeight = logs.map((log) =&gt; log.exercise.exerciseWeight ?? 0.0).fold&lt;double&gt;(0.0, (a, b) =&gt; a &gt; b ? a : b);&#10;    final caloriesPerMin = duration.inMinutes &gt; 0 ? (totalCalories / duration.inMinutes) : 0.0;&#10;&#10;    return Scaffold(&#10;      backgroundColor: const Color(0xFFFDF9F2),&#10;      appBar: AppBar(&#10;        backgroundColor: Colors.transparent,&#10;        elevation: 0,&#10;        leading: BackButton(color: Colors.black),&#10;        title: const Text(&quot;Workout Analysis&quot;, style: TextStyle(color: Colors.black)),&#10;      ),&#10;      body: SafeArea(&#10;        child: Padding(&#10;          padding: const EdgeInsets.symmetric(horizontal: 24),&#10;          child: Column(&#10;            children: [&#10;              const SizedBox(height: 12),&#10;              Row(&#10;                children: [&#10;                  const CircleAvatar(&#10;                    backgroundColor: Colors.purpleAccent,&#10;                    radius: 28,&#10;                    child: Icon(Icons.fitness_center, color: Colors.white, size: 28),&#10;                  ),&#10;                  const SizedBox(width: 12),&#10;                  Column(&#10;                    crossAxisAlignment: CrossAxisAlignment.start,&#10;                    children: [&#10;                      Text(&#10;                        workoutName,&#10;                        style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold),&#10;                      ),&#10;                      Row(&#10;                        children: [&#10;                          const Icon(Icons.calendar_today, size: 16, color: Colors.grey),&#10;                          const SizedBox(width: 4),&#10;                          Text(_formattedDate(), style: const TextStyle(color: Colors.grey)),&#10;                        ],&#10;                      ),&#10;                    ],&#10;                  )&#10;                ],&#10;              ),&#10;              const SizedBox(height: 24),&#10;&#10;              /// Summary Row&#10;              Row(&#10;                mainAxisAlignment: MainAxisAlignment.spaceEvenly,&#10;                children: [&#10;                  _summaryCard(Icons.timer_outlined, _formatDuration(duration), &quot;Duration&quot;),&#10;                  _summaryCard(Icons.local_fire_department, &quot;${totalCalories.toStringAsFixed(0)} kcal&quot;, &quot;Calories&quot;),&#10;                  _summaryCard(Icons.trending_up, &quot;Advanced&quot;, &quot;Intensity&quot;),&#10;                ],&#10;              ),&#10;&#10;              const SizedBox(height: 24),&#10;&#10;              /// Stats&#10;              Align(&#10;                alignment: Alignment.centerLeft,&#10;                child: Text(&quot;Detailed Stats&quot;, style: Theme.of(context).textTheme.titleMedium?.copyWith(fontWeight: FontWeight.bold)),&#10;              ),&#10;              const SizedBox(height: 12),&#10;              _buildStatRow(&quot;Average Heart Rate&quot;, &quot;123 bpm&quot;),&#10;              _buildStatRow(&quot;Peak Heart Rate&quot;, &quot;143 bpm&quot;),&#10;              _buildStatRow(&quot;Steps&quot;, &quot;1,245&quot;), // Replace with real data if available&#10;              _buildStatRow(&quot;Sets&quot;, totalSets.toString()),&#10;              _buildStatRow(&quot;Reps&quot;, totalReps.join(', ')),&#10;              _buildStatRow(&quot;Max Weight&quot;, &quot;${maxWeight.toStringAsFixed(0)} kg&quot;),&#10;              _buildStatRow(&quot;Calories per min&quot;, caloriesPerMin.toStringAsFixed(1)),&#10;&#10;              const SizedBox(height: 20),&#10;              Align(&#10;                alignment: Alignment.centerLeft,&#10;                child: Text(&quot;Session Notes&quot;, style: Theme.of(context).textTheme.titleSmall?.copyWith(fontWeight: FontWeight.bold)),&#10;              ),&#10;              const SizedBox(height: 6),&#10;              const Align(&#10;                alignment: Alignment.centerLeft,&#10;                child: Text(&quot;Felt strong! Increased weight &quot;, style: TextStyle(fontStyle: FontStyle.italic)),&#10;              ),&#10;&#10;              const Spacer(),&#10;&#10;              SizedBox(&#10;                width: double.infinity,&#10;                child: ElevatedButton.icon(&#10;                  style: ElevatedButton.styleFrom(&#10;                    backgroundColor: Colors.indigo[900],&#10;                    foregroundColor: Colors.white,&#10;                    padding: const EdgeInsets.symmetric(vertical: 14),&#10;                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),&#10;                  ),&#10;                  onPressed: () {&#10;                    // Implement share/export/report logic here&#10;                  },&#10;                  icon: const Icon(Icons.share),&#10;                  label: const Text(&quot;Share&quot;),&#10;                ),&#10;              ),&#10;              const SizedBox(height: 16),&#10;            ],&#10;          ),&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _summaryCard(IconData icon, String value, String label) {&#10;    return Column(&#10;      children: [&#10;        Container(&#10;          padding: const EdgeInsets.all(14),&#10;          decoration: BoxDecoration(&#10;            borderRadius: BorderRadius.circular(12),&#10;            color: Colors.white,&#10;            boxShadow: [BoxShadow(color: Colors.grey.shade300, blurRadius: 4, offset: const Offset(0, 2))],&#10;          ),&#10;          child: Column(&#10;            children: [&#10;              Icon(icon, size: 28, color: Colors.orange),&#10;              const SizedBox(height: 4),&#10;              Text(value, style: const TextStyle(fontWeight: FontWeight.bold)),&#10;              Text(label, style: const TextStyle(fontSize: 12, color: Colors.grey)),&#10;            ],&#10;          ),&#10;        ),&#10;      ],&#10;    );&#10;  }&#10;&#10;  Widget _buildStatRow(String label, String value) {&#10;    return Padding(&#10;      padding: const EdgeInsets.symmetric(vertical: 4),&#10;      child: Row(&#10;        mainAxisAlignment: MainAxisAlignment.spaceBetween,&#10;        children: [&#10;          Text(label),&#10;          Text(value, style: const TextStyle(fontWeight: FontWeight.bold, color: Colors.indigo)),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import 'package:flutter/material.dart';&#10;import 'package:intl/intl.dart';&#10;import '../model/exercise_model.dart';&#10;import '../../services/workout_session_service.dart';&#10;&#10;class WorkoutAnalysisPage extends StatelessWidget {&#10;  const WorkoutAnalysisPage({super.key});&#10;&#10;  String _formatDuration(Duration d) {&#10;    final minutes = d.inMinutes;&#10;    return &quot;$minutes min&quot;;&#10;  }&#10;&#10;  String _formattedDate() {&#10;    return DateFormat('yyyy-MM-dd').format(DateTime.now());&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    final session = WorkoutSessionService();&#10;    final workoutName = session.workoutName ?? &quot;My Workout&quot;;&#10;    final duration = session.elapsed;&#10;    final logs = session.loggedExercises;&#10;&#10;    // Calculations&#10;    final totalCalories = logs.fold&lt;double&gt;(0.0, (sum, log) =&gt; sum + (log.calories ?? 0.0));&#10;    final totalSets = logs.length;&#10;    // Calculate total reps across all exercises&#10;    final totalReps = logs.fold&lt;int&gt;(0, (sum, log) =&gt; sum + (log.exercise.exerciseReps ?? 0));&#10;    final maxWeight = logs.map((log) =&gt; log.exercise.exerciseWeight ?? 0.0).fold&lt;double&gt;(0.0, (a, b) =&gt; a &gt; b ? a : b);&#10;    final caloriesPerMin = duration.inMinutes &gt; 0 ? (totalCalories / duration.inMinutes) : 0.0;&#10;&#10;    return Scaffold(&#10;      backgroundColor: const Color(0xFFFDF9F2),&#10;      appBar: AppBar(&#10;        backgroundColor: Colors.transparent,&#10;        elevation: 0,&#10;        leading: BackButton(color: Colors.black),&#10;        title: const Text(&quot;Workout Analysis&quot;, style: TextStyle(color: Colors.black)),&#10;      ),&#10;      body: SafeArea(&#10;        child: Padding(&#10;          padding: const EdgeInsets.symmetric(horizontal: 24),&#10;          child: Column(&#10;            children: [&#10;              const SizedBox(height: 12),&#10;              Row(&#10;                children: [&#10;                  const CircleAvatar(&#10;                    backgroundColor: Colors.purpleAccent,&#10;                    radius: 28,&#10;                    child: Icon(Icons.fitness_center, color: Colors.white, size: 28),&#10;                  ),&#10;                  const SizedBox(width: 12),&#10;                  Column(&#10;                    crossAxisAlignment: CrossAxisAlignment.start,&#10;                    children: [&#10;                      Text(&#10;                        workoutName,&#10;                        style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold),&#10;                      ),&#10;                      Row(&#10;                        children: [&#10;                          const Icon(Icons.calendar_today, size: 16, color: Colors.grey),&#10;                          const SizedBox(width: 4),&#10;                          Text(_formattedDate(), style: const TextStyle(color: Colors.grey)),&#10;                        ],&#10;                      ),&#10;                    ],&#10;                  )&#10;                ],&#10;              ),&#10;              const SizedBox(height: 24),&#10;&#10;              /// Summary Row&#10;              Row(&#10;                mainAxisAlignment: MainAxisAlignment.spaceEvenly,&#10;                children: [&#10;                  _summaryCard(Icons.timer_outlined, _formatDuration(duration), &quot;Duration&quot;),&#10;                  _summaryCard(Icons.local_fire_department, &quot;${totalCalories.toStringAsFixed(0)} kcal&quot;, &quot;Calories&quot;),&#10;                  _summaryCard(Icons.trending_up, &quot;Advanced&quot;, &quot;Intensity&quot;),&#10;                ],&#10;              ),&#10;&#10;              const SizedBox(height: 24),&#10;&#10;              /// Stats&#10;              Align(&#10;                alignment: Alignment.centerLeft,&#10;                child: Text(&quot;Detailed Stats&quot;, style: Theme.of(context).textTheme.titleMedium?.copyWith(fontWeight: FontWeight.bold)),&#10;              ),&#10;              const SizedBox(height: 12),&#10;              _buildStatRow(&quot;Average Heart Rate&quot;, &quot;123 bpm&quot;),&#10;              _buildStatRow(&quot;Peak Heart Rate&quot;, &quot;143 bpm&quot;),&#10;              _buildStatRow(&quot;Steps&quot;, &quot;1,245&quot;), // Replace with real data if available&#10;              _buildStatRow(&quot;Sets&quot;, totalSets.toString()),&#10;              _buildStatRow(&quot;Total Reps&quot;, totalReps.toString()),&#10;              _buildStatRow(&quot;Max Weight&quot;, &quot;${maxWeight.toStringAsFixed(0)} kg&quot;),&#10;              _buildStatRow(&quot;Calories per min&quot;, caloriesPerMin.toStringAsFixed(1)),&#10;&#10;              const SizedBox(height: 20),&#10;              Align(&#10;                alignment: Alignment.centerLeft,&#10;                child: Text(&quot;Session Notes&quot;, style: Theme.of(context).textTheme.titleSmall?.copyWith(fontWeight: FontWeight.bold)),&#10;              ),&#10;              const SizedBox(height: 6),&#10;              const Align(&#10;                alignment: Alignment.centerLeft,&#10;                child: Text(&quot;Felt strong! Increased weight &quot;, style: TextStyle(fontStyle: FontStyle.italic)),&#10;              ),&#10;&#10;              const Spacer(),&#10;&#10;              SizedBox(&#10;                width: double.infinity,&#10;                child: ElevatedButton.icon(&#10;                  style: ElevatedButton.styleFrom(&#10;                    backgroundColor: Colors.indigo[900],&#10;                    foregroundColor: Colors.white,&#10;                    padding: const EdgeInsets.symmetric(vertical: 14),&#10;                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),&#10;                  ),&#10;                  onPressed: () {&#10;                    // Implement share/export/report logic here&#10;                  },&#10;                  icon: const Icon(Icons.share),&#10;                  label: const Text(&quot;Share&quot;),&#10;                ),&#10;              ),&#10;              const SizedBox(height: 16),&#10;            ],&#10;          ),&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _summaryCard(IconData icon, String value, String label) {&#10;    return Column(&#10;      children: [&#10;        Container(&#10;          padding: const EdgeInsets.all(14),&#10;          decoration: BoxDecoration(&#10;            borderRadius: BorderRadius.circular(12),&#10;            color: Colors.white,&#10;            boxShadow: [BoxShadow(color: Colors.grey.shade300, blurRadius: 4, offset: const Offset(0, 2))],&#10;          ),&#10;          child: Column(&#10;            children: [&#10;              Icon(icon, size: 28, color: Colors.orange),&#10;              const SizedBox(height: 4),&#10;              Text(value, style: const TextStyle(fontWeight: FontWeight.bold)),&#10;              Text(label, style: const TextStyle(fontSize: 12, color: Colors.grey)),&#10;            ],&#10;          ),&#10;        ),&#10;      ],&#10;    );&#10;  }&#10;&#10;  Widget _buildStatRow(String label, String value) {&#10;    return Padding(&#10;      padding: const EdgeInsets.symmetric(vertical: 4),&#10;      child: Row(&#10;        mainAxisAlignment: MainAxisAlignment.spaceBetween,&#10;        children: [&#10;          Text(label),&#10;          Text(value, style: const TextStyle(fontWeight: FontWeight.bold, color: Colors.indigo)),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/wise-workout/wise-workout-app/lib/services/workout_session_service.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/wise-workout/wise-workout-app/lib/services/workout_session_service.dart" />
              <option name="originalContent" value="import 'dart:async';&#10;import '../screens/model/exercise_model.dart';&#10;&#10;class WorkoutSessionService {&#10;  static final WorkoutSessionService _instance = WorkoutSessionService._internal();&#10;&#10;  factory WorkoutSessionService() =&gt; _instance;&#10;&#10;  WorkoutSessionService._internal();&#10;&#10;  bool _isActive = false;&#10;  String? _workoutName;&#10;  DateTime? _startTime;&#10;  Timer? _timer;&#10;&#10;  final List&lt;LoggedExercise&gt; _loggedExercises = [];&#10;  final StreamController&lt;Duration&gt; _elapsedController = StreamController&lt;Duration&gt;.broadcast();&#10;&#10;  // Public getters&#10;  bool get isActive =&gt; _isActive;&#10;  String? get workoutName =&gt; _workoutName;&#10;  Duration get elapsed =&gt; _startTime != null ? DateTime.now().difference(_startTime!) : Duration.zero;&#10;  Stream&lt;Duration&gt; get elapsedStream =&gt; _elapsedController.stream;&#10;  List&lt;LoggedExercise&gt; get loggedExercises =&gt; List.unmodifiable(_loggedExercises);&#10;&#10;  // Set workout name (called before session starts)&#10;  void setWorkoutName(String name) {&#10;    _workoutName = name;&#10;  }&#10;&#10;  // Start workout session&#10;  void start([void Function()? onTick]) {&#10;    if (_isActive) return;&#10;&#10;    _isActive = true;&#10;    _startTime = DateTime.now();&#10;    _loggedExercises.clear();&#10;&#10;    _timer = Timer.periodic(const Duration(seconds: 1), (_) {&#10;      _elapsedController.add(elapsed);&#10;      if (onTick != null) {&#10;        onTick();&#10;      }&#10;    });&#10;  }&#10;&#10;  // Add an exercise log to the session&#10;  void addExerciseLog({required Exercise exercise, required double calories}) {&#10;    _loggedExercises.add(&#10;      LoggedExercise(&#10;        exercise: exercise,&#10;        calories: calories,&#10;        timestamp: DateTime.now(),&#10;      ),&#10;    );&#10;  }&#10;&#10;  // Clear the session (when user ends the workout)&#10;  void clearSession() {&#10;    _timer?.cancel();&#10;    _timer = null;&#10;    _startTime = null;&#10;    _isActive = false;&#10;    _loggedExercises.clear();&#10;    _workoutName = null;&#10;    _elapsedController.add(Duration.zero);&#10;  }&#10;}&#10;&#10;// LoggedExercise structure&#10;class LoggedExercise {&#10;  final Exercise exercise;&#10;  final double calories;&#10;  final DateTime timestamp;&#10;&#10;  LoggedExercise({&#10;    required this.exercise,&#10;    required this.calories,&#10;    required this.timestamp,&#10;  });&#10;}&#10;" />
              <option name="updatedContent" value="import 'dart:async';&#10;import '../screens/model/exercise_model.dart';&#10;&#10;class WorkoutSessionService {&#10;  static final WorkoutSessionService _instance = WorkoutSessionService._internal();&#10;&#10;  factory WorkoutSessionService() =&gt; _instance;&#10;&#10;  WorkoutSessionService._internal();&#10;&#10;  bool _isActive = false;&#10;  String? _workoutName;&#10;  DateTime? _startTime;&#10;  Timer? _timer;&#10;&#10;  final List&lt;LoggedExercise&gt; _loggedExercises = [];&#10;  final StreamController&lt;Duration&gt; _elapsedController = StreamController&lt;Duration&gt;.broadcast();&#10;&#10;  // Public getters&#10;  bool get isActive =&gt; _isActive;&#10;  String? get workoutName =&gt; _workoutName;&#10;  Duration get elapsed =&gt; _startTime != null ? DateTime.now().difference(_startTime!) : Duration.zero;&#10;  Stream&lt;Duration&gt; get elapsedStream =&gt; _elapsedController.stream;&#10;  List&lt;LoggedExercise&gt; get loggedExercises =&gt; List.unmodifiable(_loggedExercises);&#10;&#10;  // Set workout name (called before session starts)&#10;  void setWorkoutName(String name) {&#10;    _workoutName = name;&#10;  }&#10;&#10;  // Start workout session&#10;  void start([void Function()? onTick]) {&#10;    if (_isActive) return;&#10;&#10;    _isActive = true;&#10;    _startTime = DateTime.now();&#10;    _loggedExercises.clear();&#10;&#10;    _timer = Timer.periodic(const Duration(seconds: 1), (_) {&#10;      _elapsedController.add(elapsed);&#10;      if (onTick != null) {&#10;        onTick();&#10;      }&#10;    });&#10;  }&#10;&#10;  // Add an exercise log to the session&#10;  void addExerciseLog({required Exercise exercise, required double calories, required List&lt;Map&lt;String, dynamic&gt;&gt; sets}) {&#10;    _loggedExercises.add(&#10;      LoggedExercise(&#10;        exercise: exercise,&#10;        calories: calories,&#10;        sets: sets,&#10;        timestamp: DateTime.now(),&#10;      ),&#10;    );&#10;  }&#10;&#10;  // Clear the session (when user ends the workout)&#10;  void clearSession() {&#10;    _timer?.cancel();&#10;    _timer = null;&#10;    _startTime = null;&#10;    _isActive = false;&#10;    _loggedExercises.clear();&#10;    _workoutName = null;&#10;    _elapsedController.add(Duration.zero);&#10;  }&#10;}&#10;&#10;// LoggedExercise structure&#10;class LoggedExercise {&#10;  final Exercise exercise;&#10;  final double calories;&#10;  final List&lt;Map&lt;String, dynamic&gt;&gt; sets;&#10;  final DateTime timestamp;&#10;&#10;  LoggedExercise({&#10;    required this.exercise,&#10;    required this.calories,&#10;    required this.sets,&#10;    required this.timestamp,&#10;  });&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>